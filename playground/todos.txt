Tech debts
- resource adapters should have these mimetypes: 
	- input mimetype (similar to content-type in http requests)	
	- output mimetype (similar to accept in http requests) - should have as many as the adapter produces. 
		REVIEW adapters dispose everything they load - 
		Looks like the generic/intermediate resources (image, geometry, resource, etc.) are not being deleted.
			two options: delete on resource class or delete in all of the adapters that produce those with some helper.
		Shaders are also leaking for some reason.

- review resource adapters chaining load/addResource calls. Unify resourceManager/resourceLoadRequest/resourceLoadResponse in a single class?
	- issue is getResourceManager()->load(...) is not propagating labels and options unless calling with a resourceLoadRequest clone.

- troubleshoot skybox renderer and grid renderer - they cause the application to crash thus are disabled (if possible cover issue with unit tests)

- unit tests!

- replace printf by streams and toString() by << operator

- review RAII and 5 of 5 principle (move semantics) in resources/playground classes.
	specially in file parser / text parser and resources.

- what should be a resource identifier: filepath+name+mimetype - uri+mimetype where uri is fullpath/name? This has implications in cache key and cache storage itself.

- review design of particle manager/collision detector / geometry vs particles / etc. Too much vector passing and copying. Review polymorfism / std::vector<unique_ptr> usage.

- Review collision action design: use lambdas instead of template pattern for collision response actions. Review design of BulletParticle used for playing sounds on balls bouncing.

- Review collision detection / response: there is no way to configure restitution factor - should be based on the two objects colliding and/or configurable.

- improve box rendering (normals)


----------------

New stuff:

- Road fighter:
	- Add support for loading single resources from a file containing multiple objects (obj files)
	- Add textured object code support, so that I can load and display a 3d object instead of having to load the vertex array, texture and material separatedly. 
	- Add labels to resources, so that we can unload a level resources and load next levels.



- Add menu for selecting demo. At least add cli parameters to allow selecting demo - anything better than commenting lines in main.cpp

- TerrainDemo: 
	- Add class to compose several terrain patches and make calculations to determine which patch. 
	- mod infinite terrain? render those inside camera frustrum
	- Add some class to generate bounding geometry from this.
	- Some other tree model
	- Add grass / ferns with transparency
	- use own particle class or review design (lambdas maybe?) - currently it is using class from a different demo

	- evolve this demo to be a planet and then a solar system.

Games: 
- Battle city:

- tanques vs naves
- defend the tower
- scenery (with train or racing cars - lightning mcqueen and cruz, wind/rain, vegetation and animals, water, day/night transition, sun and moon, etc.)

robotica - brazo (curso)
scalectric - o veh√≠culos (autos, trenes, naves) que sigan una ruta predefinida con escenarios de fondo
